name: "tests"

# Uses the cron schedule for github actions
#
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#scheduled-events
#
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │
# │ │ │ │ │
# │ │ │ │ │
# * * * * *

env:
  OCTFLAGS: --no-gui --no-window-system --silent

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']
  schedule:
    - cron: "0 0 1,15 * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [matlab, octave]
      fail-fast: false

    steps:
    - name: Install dependencies
      run: |
        sudo apt-get -y -qq update
        sudo apt-get -y install unzip wget

    - name: Install Node
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Clone bidspm
      uses: actions/checkout@v3
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install validators
      run: make install

    - name: Install SPM
      run: |
        git clone https://github.com/spm/spm12.git --depth 1

    - name: Copy Macs toolbox to SPM inputs_folder
      run: cp -rv lib/MACS spm12/toolbox/MACS

    - name: Get moae fmriprep data from OSF
      run: |
        mkdir -p demos/MoAE/inputs/
        cd demos/MoAE/inputs/
        wget https://osf.io/vufjs/download
        unzip download
        mv moae_fmriprep fmriprep

    - name: Prepare test data
      run: |
        cd tests
        make data

    - name: Install Moxunit and MOcov
      run: |
        git clone https://github.com/MOxUnit/MOxUnit.git --depth 1
        git clone https://github.com/MOcov/MOcov.git --depth 1

    - name: Install octave
      if: ${{ matrix.platform }} == 'octave'
      run: |
        sudo apt-get -y -qq update
        sudo apt-get -y install octave liboctave-dev
        make -C MOxUnit install
        make -C MOcov install

    - name: Compile SPM
      if: ${{ matrix.platform }} == 'octave'
      run: |
        make -C spm12/src PLATFORM=octave distclean
        make -C spm12/src PLATFORM=octave
        make -C spm12/src PLATFORM=octave install
        octave $OCTFLAGS --eval "addpath(fullfile(pwd, 'spm12')); savepath();"

    - name: Run tests Octave
      if: ${{ matrix.platform }} == 'octave'
      run: |
        octave $OCTFLAGS --eval "addpath(fullfile(pwd, 'tests', 'utils')); savepath();"
        octave $OCTFLAGS --eval "bidspm(); cd demos/MoAE; download_moae_ds(true);"
        cd .github/workflows
        octave $OCTFLAGS --eval "tests_octave;"

    - name: Install MATLAB
      if: ${{ matrix.platform }} == 'matlab'
      uses: matlab-actions/setup-matlab@v1.2.3
      with:
        # MATLAB release to set up R2020a
        release: R2020a

    - name: Run tests MATLAB
      if: ${{ matrix.platform }} == 'matlab'
      uses: matlab-actions/run-command@v1.1.2
      with:
        command: cd(fullfile(getenv('GITHUB_WORKSPACE'), '.github', 'workflows')); run tests_matlab;

    - name: Check tests
      run: |
        cat test_report.log | grep 0

    - name: Code coverage ${{ matrix.platform }}
      uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        flags: ${{ matrix.platform }}
        name: codecov-${{ matrix.platform }}
        fail_ci_if_error: false
      # token: ${{ secrets.CODECOV_TOKEN }}  # not required but might help API rate limits
