% (C) Copyright 2020 CPP_SPM developers

function test_suite = test_setBatchCoregistrationFmap %#ok<*STOUT>
  try % assignment of 'localfunctions' is necessary in Matlab >= 2016
    test_functions = localfunctions(); %#ok<*NASGU>
  catch % no problem; early Matlab versions can use initTestSuite fine
  end
  initTestSuite;
end

function test_setBatchCoregistrationFmapBasic()

  subID = '01';

  opt.taskName = 'vismotion';
  opt.derivativesDir = fullfile(fileparts(mfilename('fullpath')), 'dummyData');

  opt = checkOptions(opt);

  [~, opt, BIDS] = getData(opt);

  matlabbatch = {};
  matlabbatch = setBatchCoregistrationFmap(matlabbatch, BIDS, opt, subID);

  directory = fullfile(opt.derivativesDir, ...
                       'sub-01', ...
                       'ses-01');
  ref = fullfile(directory, ...
                 'func', ...
                 'mean_sub-01_ses-01_task-vismotion_run-1_bold.nii');

  expectedbatch = [];

  src = fullfile(directory, ...
                 'fmap', ...
                 'sub-01_ses-01_run-2_magnitude1.nii');
  other = {fullfile(directory, ...
                    'fmap', ...
                    'sub-01_ses-01_run-2_magnitude2.nii'); ...
           fullfile(directory, ...
                    'fmap', ...
                    'sub-01_ses-01_run-2_phasediff.nii')};
  expectedbatch{end + 1}.spm.spatial.coreg.estimate.ref = { ref };
  expectedbatch{end}.spm.spatial.coreg.estimate.source = { src };
  expectedbatch{end}.spm.spatial.coreg.estimate.other = other;

  directory = fullfile(opt.derivativesDir, ...
                       'sub-01', ...
                       'ses-02');
  src = fullfile(directory, ...
                 'fmap', ...
                 'sub-01_ses-02_run-2_magnitude1.nii');
  other = {fullfile(directory, ...
                    'fmap', ...
                    'sub-01_ses-02_run-2_magnitude2.nii'); ...
           fullfile(directory, ...
                    'fmap', ...
                    'sub-01_ses-02_run-2_phasediff.nii')};
  expectedbatch{end + 1}.spm.spatial.coreg.estimate.ref = { ref };
  expectedbatch{end}.spm.spatial.coreg.estimate.source = { src };
  expectedbatch{end}.spm.spatial.coreg.estimate.other = other;

  assertEqual(matlabbatch, expectedbatch);

end
