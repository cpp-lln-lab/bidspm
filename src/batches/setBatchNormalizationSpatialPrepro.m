function matlabbatch = setBatchNormalizationSpatialPrepro(matlabbatch, opt, voxDim)
  %
  % Short description of what the function does goes here.
  %
  % USAGE::
  %
  %   matlabbatch = setBatchNormalizationSpatialPrepro(matlabbatch, opt, voxDim)
  %
  % :param matlabbatch:
  % :type matlabbatch: structure
  % :param opt:
  % :type opt: structure
  % :param voxDim:
  % :type opt: array
  %
  % :returns: - :matlabbatch: (structure)
  %
  % (C) Copyright 2019 CPP_SPM developers

  jobsToAdd = numel(matlabbatch) + 1;

  for iJob = jobsToAdd:(jobsToAdd + 5)

    % set the deformation field for all the images we are about to normalize
    deformationField = ...
        cfg_dep('Segment: Forward Deformations', ...
                substruct( ...
                          '.', 'val', '{}', {opt.orderBatches.segment}, ...
                          '.', 'val', '{}', {1}, ...
                          '.', 'val', '{}', {1}), ...
                substruct('.', 'fordef', '()', {':'}));

    % we set images to be resampled at the voxel size we had at acquisition
    matlabbatch = setBatchNormalize(matlabbatch, deformationField, voxDim);

  end

  printBatchName('normalise functional images');
  matlabbatch{jobsToAdd}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Coregister: Estimate: Coregistered Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.coregister}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct('.', 'cfiles'));

  % NORMALIZE STRUCTURAL
  printBatchName('normalise anatomical images');
  matlabbatch{jobsToAdd + 1}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: Bias Corrected (1)', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'channel', '()', {1}, ...
                        '.', 'biascorr', '()', {':'}));
  % size 3 allow to run RunQA / original voxel size at acquisition
  matlabbatch{jobsToAdd + 1}.spm.spatial.normalise.write.woptions.vox = [1 1 1];

  % NORMALIZE GREY MATTER
  printBatchName('normalise grey matter tissue probability map');
  matlabbatch{jobsToAdd + 2}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c1 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {1}, ...
                        '.', 'c', '()', {':'}));

  % NORMALIZE WHITE MATTER
  printBatchName('normalise white matter tissue probability map');
  matlabbatch{jobsToAdd + 3}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c2 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {2}, ...
                        '.', 'c', '()', {':'}));

  % NORMALIZE CSF MATTER
  printBatchName('normalise csf tissue probability map');
  matlabbatch{jobsToAdd + 4}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Segment: c3 Images', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.segment}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct( ...
                        '.', 'tiss', '()', {3}, ...
                        '.', 'c', '()', {':'}));

  % NORMALIZE SKULSTRIPPED STRUCTURAL
  printBatchName('normalise skullstripped anatomical images');
  matlabbatch{jobsToAdd + 5}.spm.spatial.normalise.write.subj.resample(1) = ...
      cfg_dep('Image Calculator: skullstripped anatomical', ...
              substruct( ...
                        '.', 'val', '{}', {opt.orderBatches.skullStripping}, ...
                        '.', 'val', '{}', {1}, ...
                        '.', 'val', '{}', {1}), ...
              substruct('.', 'files'));
  % size 3 allow to run RunQA / original voxel size at acquisition
  matlabbatch{jobsToAdd + 5}.spm.spatial.normalise.write.woptions.vox = [1 1 1];

end
